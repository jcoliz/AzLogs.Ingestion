//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Weather.Worker.Api
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public WeatherClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.weather.gov";
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <remarks>
        /// Returns a textual forecast for a 2.5km grid area
        /// </remarks>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <returns>A forecast for a gridpoint.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GridpointForecastGeoJson> Gridpoint_forecastAsync(NWSForecastOfficeId wfo, int x, int y)
        {
            return Gridpoint_forecastAsync(wfo, x, y, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns a textual forecast for a 2.5km grid area
        /// </remarks>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <returns>A forecast for a gridpoint.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GridpointForecastGeoJson> Gridpoint_forecastAsync(NWSForecastOfficeId wfo, int x, int y, System.Threading.CancellationToken cancellationToken)
        {
            if (wfo == null)
                throw new System.ArgumentNullException("wfo");

            if (x == null)
                throw new System.ArgumentNullException("x");

            if (y == null)
                throw new System.ArgumentNullException("y");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/geo+json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "gridpoints/{wfo}/{x},{y}/forecast"
                    urlBuilder_.Append("gridpoints/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(wfo, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(x, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append(',');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(y, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/forecast");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GridpointForecastGeoJson>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetail>("An error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JsonLdContext : System.Collections.ObjectModel.Collection<object>
    {

    }

    /// <summary>
    /// Three-letter identifier for a NWS office.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NWSForecastOfficeId
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AKQ")]
        AKQ = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALY")]
        ALY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BGM")]
        BGM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BOX")]
        BOX = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"BTV")]
        BTV = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BUF")]
        BUF = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CAE")]
        CAE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CAR")]
        CAR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CHS")]
        CHS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CLE")]
        CLE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CTP")]
        CTP = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GSP")]
        GSP = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"GYX")]
        GYX = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ILM")]
        ILM = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ILN")]
        ILN = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"LWX")]
        LWX = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"MHX")]
        MHX = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"OKX")]
        OKX = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PBZ")]
        PBZ = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PHI")]
        PHI = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"RAH")]
        RAH = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"RLX")]
        RLX = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"RNK")]
        RNK = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"ABQ")]
        ABQ = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AMA")]
        AMA = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"BMX")]
        BMX = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"BRO")]
        BRO = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"CRP")]
        CRP = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"EPZ")]
        EPZ = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"EWX")]
        EWX = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"FFC")]
        FFC = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"FWD")]
        FWD = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"HGX")]
        HGX = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"HUN")]
        HUN = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"JAN")]
        JAN = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"JAX")]
        JAX = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"KEY")]
        KEY = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"LCH")]
        LCH = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"LIX")]
        LIX = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"LUB")]
        LUB = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"LZK")]
        LZK = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"MAF")]
        MAF = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"MEG")]
        MEG = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"MFL")]
        MFL = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"MLB")]
        MLB = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"MOB")]
        MOB = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"MRX")]
        MRX = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"OHX")]
        OHX = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"OUN")]
        OUN = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"SHV")]
        SHV = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SJT")]
        SJT = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"SJU")]
        SJU = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"TAE")]
        TAE = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"TBW")]
        TBW = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"TSA")]
        TSA = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"ABR")]
        ABR = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"APX")]
        APX = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"ARX")]
        ARX = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"BIS")]
        BIS = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"BOU")]
        BOU = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"CYS")]
        CYS = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"DDC")]
        DDC = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"DLH")]
        DLH = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"DMX")]
        DMX = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"DTX")]
        DTX = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"DVN")]
        DVN = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"EAX")]
        EAX = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"FGF")]
        FGF = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"FSD")]
        FSD = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"GID")]
        GID = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"GJT")]
        GJT = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"GLD")]
        GLD = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"GRB")]
        GRB = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"GRR")]
        GRR = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"ICT")]
        ICT = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"ILX")]
        ILX = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"IND")]
        IND = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"IWX")]
        IWX = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"JKL")]
        JKL = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"LBF")]
        LBF = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"LMK")]
        LMK = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"LOT")]
        LOT = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"LSX")]
        LSX = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"MKX")]
        MKX = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"MPX")]
        MPX = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"MQT")]
        MQT = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"OAX")]
        OAX = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"PAH")]
        PAH = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"PUB")]
        PUB = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"RIW")]
        RIW = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"SGF")]
        SGF = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP")]
        TOP = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"UNR")]
        UNR = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"BOI")]
        BOI = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"BYZ")]
        BYZ = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"EKA")]
        EKA = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"FGZ")]
        FGZ = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"GGW")]
        GGW = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"HNX")]
        HNX = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"LKN")]
        LKN = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"LOX")]
        LOX = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"MFR")]
        MFR = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"MSO")]
        MSO = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"MTR")]
        MTR = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"OTX")]
        OTX = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"PDT")]
        PDT = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"PIH")]
        PIH = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"PQR")]
        PQR = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"PSR")]
        PSR = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"REV")]
        REV = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"SEW")]
        SEW = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"SGX")]
        SGX = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"SLC")]
        SLC = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"STO")]
        STO = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"TFX")]
        TFX = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"TWC")]
        TWC = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"VEF")]
        VEF = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"AER")]
        AER = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"AFC")]
        AFC = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"AFG")]
        AFG = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"AJK")]
        AJK = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"ALU")]
        ALU = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"GUM")]
        GUM = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"HPA")]
        HPA = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"HFO")]
        HFO = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"PPG")]
        PPG = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"STU")]
        STU = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"NH1")]
        NH1 = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"NH2")]
        NH2 = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"ONA")]
        ONA = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"ONP")]
        ONP = 130,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ISO8601Interval
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An object containing forecast information for a specific time period (generally 12-hour or 1-hour).
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GridpointForecastPeriod
    {
        /// <summary>
        /// Sequential period number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Number { get; set; } = default!;

        /// <summary>
        /// A textual identifier for the period. This value will not be present for hourly forecasts.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; } = default!;

        /// <summary>
        /// The starting time that this forecast period is valid for.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("startTime")]
        public System.DateTimeOffset StartTime { get; set; } = default!;

        /// <summary>
        /// The ending time that this forecast period is valid for.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("endTime")]
        public System.DateTimeOffset EndTime { get; set; } = default!;

        /// <summary>
        /// Indicates whether this period is daytime or nighttime.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isDaytime")]
        public bool IsDaytime { get; set; } = default!;

        /// <summary>
        /// High/low temperature for the period, depending on whether the period is day or night.
        /// <br/>This property as an integer value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the "forecast_temperature_qv" feature flag on the request.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("temperature")]
        public int Temperature { get; set; } = default!;

        /// <summary>
        /// The unit of the temperature value (Fahrenheit or Celsius).
        /// <br/>This property is deprecated. Future versions will indicate the unit within the quantitative value object for the temperature property. To make use of the future standard format now, set the "forecast_temperature_qv" feature flag on the request.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("temperatureUnit")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        [System.Obsolete]
        public GridpointForecastPeriodTemperatureUnit TemperatureUnit { get; set; } = default!;

        /// <summary>
        /// If not null, indicates a non-diurnal temperature trend for the period (either rising temperature overnight, or falling temperature during the day)
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("temperatureTrend")]
        public string? TemperatureTrend { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("probabilityOfPrecipitation")]
        public QuantitativeValue ProbabilityOfPrecipitation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dewpoint")]
        public QuantitativeValue Dewpoint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("relativeHumidity")]
        public QuantitativeValue RelativeHumidity { get; set; } = default!;

        /// <summary>
        /// Wind speed for the period.
        /// <br/>This property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the "forecast_wind_speed_qv" feature flag on the request.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("windSpeed")]
        public string WindSpeed { get; set; } = default!;

        /// <summary>
        /// Peak wind gust for the period.
        /// <br/>This property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the "forecast_wind_speed_qv" feature flag on the request.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("windGust")]
        public string? WindGust { get; set; } = default!;

        /// <summary>
        /// The prevailing direction of the wind for the period, using a 16-point compass.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("windDirection")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public GridpointForecastPeriodWindDirection WindDirection { get; set; } = default!;

        /// <summary>
        /// A link to an icon representing the forecast summary.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("icon")]
        [System.Obsolete]
        public System.Uri Icon { get; set; } = default!;

        /// <summary>
        /// A brief textual forecast summary for the period.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shortForecast")]
        public string ShortForecast { get; set; } = default!;

        /// <summary>
        /// A detailed textual forecast for the period.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("detailedForecast")]
        public string DetailedForecast { get; set; } = default!;

    }

    /// <summary>
    /// Denotes the units used in the textual portions of the forecast.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GridpointForecastUnits
    {

        [System.Runtime.Serialization.EnumMember(Value = @"us")]
        Us = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"si")]
        Si = 1,

    }

    /// <summary>
    /// A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuantitativeValue
    {
        /// <summary>
        /// A measured value
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public double? Value { get; set; } = default!;

        /// <summary>
        /// The maximum value of a range of measured values
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("maxValue")]
        public double MaxValue { get; set; } = default!;

        /// <summary>
        /// The minimum value of a range of measured values
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("minValue")]
        public double MinValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCode")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((wmo|uc|wmoUnit|nwsUnit):)?.*$")]
        public string UnitCode { get; set; } = default!;

        /// <summary>
        /// For values in observation records, the quality control flag from the MADIS system. The definitions of these flags can be found at https://madis.ncep.noaa.gov/madis_sfc_qc_notes.shtml
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("qualityControl")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public QuantitativeValueQualityControl QualityControl { get; set; } = default!;

    }

    /// <summary>
    /// A multi-day forecast for a 2.5km grid square.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GridpointForecast
    {

        [System.Text.Json.Serialization.JsonPropertyName("@context")]
        public JsonLdContext Context { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("geometry")]
        public string? Geometry { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public GridpointForecastUnits Units { get; set; } = default!;

        /// <summary>
        /// The internal generator class used to create the forecast text (used for NWS debugging).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("forecastGenerator")]
        public string ForecastGenerator { get; set; } = default!;

        /// <summary>
        /// The time this forecast data was generated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("generatedAt")]
        public System.DateTimeOffset GeneratedAt { get; set; } = default!;

        /// <summary>
        /// The last update time of the data this forecast was generated from.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updateTime")]
        public System.DateTimeOffset UpdateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validTimes")]
        public string ValidTimes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("elevation")]
        public QuantitativeValue Elevation { get; set; } = default!;

        /// <summary>
        /// An array of forecast periods.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("periods")]
        public System.Collections.Generic.ICollection<GridpointForecastPeriod> Periods { get; set; } = default!;

    }

    /// <summary>
    /// A GeoJSON feature. Please refer to IETF RFC 7946 for information on the GeoJSON format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoJsonFeature
    {

        [System.Text.Json.Serialization.JsonPropertyName("@context")]
        public JsonLdContext Context { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Uri Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public GeoJsonFeatureType Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("geometry")]
        [System.ComponentModel.DataAnnotations.Required]
        public GeoJsonGeometryPolygon Geometry { get; set; } = new GeoJsonGeometryPolygon();

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Properties { get; set; } = new object();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoJsonGeometryPolygon
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public GeoJsonGeometryPolygonType Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("coordinates")]
        [System.ComponentModel.DataAnnotations.Required]
        public GeoJsonPolygon Coordinates { get; set; } = new GeoJsonPolygon();

        [System.Text.Json.Serialization.JsonPropertyName("bbox")]
        [System.ComponentModel.DataAnnotations.MinLength(4)]
        public GeoJsonBoundingBox Bbox { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A GeoJSON polygon. Please refer to IETF RFC 7946 for information on the GeoJSON format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoJsonPolygon : System.Collections.ObjectModel.Collection<System.Collections.ObjectModel.Collection<GeoJsonCoordinate>>
    {

    }

    /// <summary>
    /// A GeoJSON bounding box. Please refer to IETF RFC 7946 for information on the GeoJSON format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoJsonBoundingBox : System.Collections.ObjectModel.Collection<double>
    {

    }

    /// <summary>
    /// A GeoJSON coordinate. Please refer to IETF RFC 7946 for information on the GeoJSON format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoJsonCoordinate : System.Collections.ObjectModel.Collection<double>
    {

    }

    /// <summary>
    /// A GeoJSON feature. Please refer to IETF RFC 7946 for information on the GeoJSON format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GridpointForecastGeoJson
    {

        [System.Text.Json.Serialization.JsonPropertyName("@context")]
        public JsonLdContext Context { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Uri Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public GridpointForecastGeoJsonType Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("geometry")]
        [System.ComponentModel.DataAnnotations.Required]
        public GeoJsonGeometryPolygon Geometry { get; set; } = new GeoJsonGeometryPolygon();

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        [System.ComponentModel.DataAnnotations.Required]
        public GridpointForecast Properties { get; set; } = new GridpointForecast();

    }

    /// <summary>
    /// Detail about an error. This document conforms to RFC 7807 (Problem Details for HTTP APIs).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemDetail
    {
        /// <summary>
        /// A URI reference (RFC 3986) that identifies the problem type. This is only an identifier and is not necessarily a resolvable URL.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Type { get; set; } = new System.Uri("about:blank");

        /// <summary>
        /// A short, human-readable summary of the problem type.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; } = default!;

        /// <summary>
        /// The HTTP status code (RFC 7231, Section 6) generated by the origin server for this occurrence of the problem.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Range(100D, 999D)]
        public double Status { get; set; } = default!;

        /// <summary>
        /// A human-readable explanation specific to this occurrence of the problem.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; } = default!;

        /// <summary>
        /// A URI reference (RFC 3986) that identifies the specific occurrence of the problem. This is only an identifier and is not necessarily a resolvable URL.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("instance")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Instance { get; set; } = default!;

        /// <summary>
        /// A unique identifier for the request, used for NWS debugging purposes. Please include this identifier with any correspondence to help us investigate your issue.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("correlationId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CorrelationId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GridpointForecastPeriodTemperatureUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"F")]
        F = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GridpointForecastPeriodWindDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NNE")]
        NNE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NE")]
        NE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ENE")]
        ENE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ESE")]
        ESE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SE")]
        SE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SSE")]
        SSE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"SSW")]
        SSW = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"SW")]
        SW = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"WSW")]
        WSW = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"W")]
        W = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"WNW")]
        WNW = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"NW")]
        NW = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"NNW")]
        NNW = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum QuantitativeValueQualityControl
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Z")]
        Z = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"V")]
        V = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"X")]
        X = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Q")]
        Q = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"G")]
        G = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"T")]
        T = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GeoJsonFeatureType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Feature")]
        Feature = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GeoJsonGeometryPolygonType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Polygon")]
        Polygon = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GridpointForecastGeoJsonType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Feature")]
        Feature = 0,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625